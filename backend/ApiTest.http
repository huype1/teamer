### Authentication APIs

POST http://localhost:8080/api/auth/register
Content-Type: application/json

{
  "email": "test@example.com",
  "name": "Test User",
  "password": "12345678",
  "provider": "EMAIL_PASSWORD",
  "avatarUrl": "",
  "bio": "Hello! I am a new user and this is my bio."
}

###

POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "12345678"
}

###

# Logout - Requires a valid token from login
POST http://localhost:8080/api/auth/logout
Content-Type: application/json

{
  "token": "{{authToken}}"
}

###

### User APIs

GET http://localhost:8080/api/users
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/users?search=john
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/users/me
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/users/me
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated User Name",
  "bio": "This is my updated bio with more information about myself",
  "avatarUrl": "https://example.com/avatar.jpg"
}

###

DELETE http://localhost:8080/api/users/me
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/users/{{userId}}
Authorization: Bearer {{authToken}}

###

### Team APIs

POST http://localhost:8080/api/teams
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Test Team",
  "description": "A test team"
}

###

GET http://localhost:8080/api/teams
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/teams/{{teamId}}
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/teams/{{teamId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Team",
  "description": "Updated description"
}

###

DELETE http://localhost:8080/api/teams/{{teamId}}
Authorization: Bearer {{authToken}}

###

### Team Member APIs

GET http://localhost:8080/api/teams/{{teamId}}/users
Authorization: Bearer {{authToken}}

###

POST http://localhost:8080/api/teams/{{teamId}}/members?userId={{userId}}&role=MEMBER
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/teams/{{teamId}}/members?userId={{userId}}&role=ADMIN
Authorization: Bearer {{authToken}}

###

DELETE http://localhost:8080/api/teams/{{teamId}}/members/{{userId}}
Authorization: Bearer {{authToken}}

###

### WebSocket APIs

# WebSocket connection endpoint (for testing with WebSocket client)
# ws://localhost:8080/ws

# Test WebSocket subscription to issue comments
# Subscribe to: /topic/issue/{issueId}/comments

# Test WebSocket message sending
# Send to: /app/comment/join
# Body: {"issueId": "{{issueId}}"}

###
###

### Project APIs

POST http://localhost:8080/api/projects
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Test Project",
  "description": "A test project",
  "key": "TEST",
  "teamId": "{{teamId}}",
  "clientName": "Test Client",
  "startDate": "2025-01-01",
  "endDate": "2025-12-31"
}

###

GET http://localhost:8080/api/projects
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/projects/{{projectId}}
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/projects/{{projectId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Project",
  "description": "Updated description",
  "clientName": "Test Client",
  "startDate": "2025-01-01",
  "endDate": "2025-12-31"
}

###

DELETE http://localhost:8080/api/projects/{{projectId}}
Authorization: Bearer {{authToken}}

###

### Project Member APIs

GET http://localhost:8080/api/projects/{{projectId}}/members
Authorization: Bearer {{authToken}}

###

POST http://localhost:8080/api/projects/invite
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "email": "member@example.com",
  "projectId": "{{projectId}}",
  "role": "MEMBER"
}

###

PUT http://localhost:8080/api/projects/{{projectId}}/members/{{memberId}}/role?newRole=ADMIN
Authorization: Bearer {{authToken}}

###

DELETE http://localhost:8080/api/projects/{{projectId}}/members/{{memberId}}
Authorization: Bearer {{authToken}}

###

### Team Member APIs

GET http://localhost:8080/api/teams/{{teamId}}/users
Authorization: Bearer {{authToken}}

###

POST http://localhost:8080/api/teams/{{teamId}}/members?userId={{userId}}&role=MEMBER
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/teams/{{teamId}}/members?userId={{userId}}&role=ADMIN
Authorization: Bearer {{authToken}}

###

DELETE http://localhost:8080/api/teams/{{teamId}}/members/{{userId}}
Authorization: Bearer {{authToken}}

###

POST http://localhost:8080/api/teams/{{teamId}}/invite
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "email": "newmember@example.com",
  "role": "MEMBER"
}

###

### Issue APIs

POST http://localhost:8080/api/issues
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "Test Issue",
  "description": "A test issue",
  "projectId": "{{projectId}}",
  "priority": "P2",
  "issueType": "TASK"
}

###

# Test issue creation with sprint assignment
POST http://localhost:8080/api/issues
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "Test Issue with Sprint",
  "description": "A test issue assigned to a sprint",
  "projectId": "{{projectId}}",
  "priority": "P3",
  "issueType": "TASK",
  "sprintId": "{{sprintId}}",
  "assigneeId": "{{userId}}",
  "storyPoints": 5
}

###

POST http://localhost:8080/api/issues
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "Test Subtask",
  "description": "A test subtask",
  "projectId": "{{projectId}}",
  "priority": "P3",
  "issueType": "SUBTASK",
  "parentId": "{{issueId}}"
}

###

GET http://localhost:8080/api/issues/project/{{projectId}}
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/issues/{{issueId}}
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/issues/{{issueId}}/subtasks
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/issues/{{issueId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "Updated Issue",
  "description": "Updated description",
  "priority": "P1",
  "issueType": "STORY"
}

###

# Test issue update with sprint assignment
PUT http://localhost:8080/api/issues/{{issueId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "Updated Issue with Sprint",
  "description": "Updated description with sprint assignment",
  "priority": "P2",
  "issueType": "TASK",
  "sprintId": "{{sprintId}}"
}

###

# Test sprint update
PUT http://localhost:8080/api/sprints/{{sprintId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Sprint Name",
  "goal": "Updated sprint goal",
  "startDate": "2025-01-01T00:00:00Z",
  "endDate": "2025-01-15T00:00:00Z"
}

###

# Test sprint delete (will move all issues to backlog)
DELETE http://localhost:8080/api/sprints/{{sprintId}}
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/issues/{{issueId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "Updated Subtask",
  "description": "Updated subtask description",
  "priority": "P2",
  "issueType": "SUBTASK",
  "parentId": "{{parentIssueId}}"
}

###

PUT http://localhost:8080/api/issues/{{issueId}}/status?status=IN_PROGRESS
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/issues/{{issueId}}/assignee/{{userId}}
Authorization: Bearer {{authToken}}

###

DELETE http://localhost:8080/api/issues/{{issueId}}/assignee
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/issues/{{issueId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "Updated Issue",
  "description": "Updated description",
  "priority": "P1",
  "issueType": "STORY",
  "sprintId": "{{sprintId}}"
}

###

DELETE http://localhost:8080/api/issues/{{issueId}}
Authorization: Bearer {{authToken}}

###

### Sprint APIs

POST http://localhost:8080/api/sprints
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Sprint 1",
  "goal": "Complete core features",
  "startDate": "2024-01-15T00:00:00Z",
  "endDate": "2024-01-29T23:59:59Z",
  "projectId": "{{projectId}}"
}

###

GET http://localhost:8080/api/sprints/project/{{projectId}}
Authorization: Bearer {{authToken}}

###

PUT http://localhost:8080/api/sprints/{{sprintId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Sprint",
  "goal": "Updated goal",
  "startDate": "2024-01-20T00:00:00Z",
  "endDate": "2024-02-03T23:59:59Z"
}

###

POST http://localhost:8080/api/sprints/{{sprintId}}/start
Authorization: Bearer {{authToken}}

###

POST http://localhost:8080/api/sprints/{{sprintId}}/end
Authorization: Bearer {{authToken}}

###

DELETE http://localhost:8080/api/sprints/{{sprintId}}
Authorization: Bearer {{authToken}}

###

### Sprint Issue APIs

GET http://localhost:8080/api/sprints/{{sprintId}}/issues
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/sprints/project/{{projectId}}/issues/backlog
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/sprints/project/{{projectId}}/issues/active
Authorization: Bearer {{authToken}}

###

GET http://localhost:8080/api/sprints/project/{{projectId}}/issues/upcoming
Authorization: Bearer {{authToken}}

###

### Comment APIs

POST http://localhost:8080/api/comments
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "content": "Test comment",
  "issueId": "{{issueId}}"
}

###

GET http://localhost:8080/api/comments/issue/{{issueId}}
Authorization: Bearer {{authToken}}

###

### Lấy danh sách issue được giao cho user (by assigneeId)
GET http://localhost:8080/issues/assignee/{{userId}}
Authorization: Bearer {{token}}

###

### Lấy presigned URL upload file S3
POST http://localhost:8080/api/attachments/presigned-url
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "fileName": "teamer-uploader_accessKeys.csv",
  "fileType": "text/csv"
}

### Upload file lên S3 bằng presigned URL (chạy sau khi lấy được url)
# Thay {{presignedUrl}} bằng giá trị url nhận được ở trên
PUT {{presignedUrl}}
Content-Type: text/csv

< ./teamer-uploader_accessKeys.csv

### Chat API Tests ###

# Get all chats
GET http://localhost:8080/api/chats
Authorization: Bearer {{token}}

###

# Get chat by ID
GET http://localhost:8080/api/chats/{{chatId}}
Authorization: Bearer {{token}}

###

# Get all messages for a chat
GET http://localhost:8080/api/chats/{{chatId}}/messages/all
Authorization: Bearer {{token}}

###

# Create a new message
POST http://localhost:8080/api/chats/messages
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "Xin chào! Đây là tin nhắn test.",
  "chatId": "{{chatId}}"
}

###

# Delete a message
DELETE http://localhost:8080/api/chats/messages/{{messageId}}
Authorization: Bearer {{token}}

###

# Get messages with pagination (for future use)
GET http://localhost:8080/api/chats/{{chatId}}/messages?page=0&size=20
Authorization: Bearer {{token}}

###

### Document API Tests ###

# Get all documents for a project (without content for performance)
GET http://localhost:8080/api/documents/project/{{projectId}}
Authorization: Bearer {{authToken}}

###

# Get specific document with content
GET http://localhost:8080/api/documents/{{documentId}}
Authorization: Bearer {{authToken}}

###

# Create a new document
POST http://localhost:8080/api/documents
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "API Documentation",
  "content": "{\"ops\":[{\"insert\":\"This is a test document created via API.\"}]}",
  "projectId": "{{projectId}}"
}

###

# Update a document
PUT http://localhost:8080/api/documents/{{documentId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "title": "Updated API Documentation",
  "content": "{\"ops\":[{\"insert\":\"This document has been updated via API.\"}]}"
}

###

# Delete a document
DELETE http://localhost:8080/api/documents/{{documentId}}
Authorization: Bearer {{authToken}}

###

### Notification API Tests ###

# Create notification for multiple users
POST http://localhost:8080/api/notifications
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "userIds": ["{{userId1}}", "{{userId2}}"],
  "title": "Bạn có cập nhật mới",
  "content": "Issue TEST-123 vừa được cập nhật",
  "link": "http://localhost:5173/issues/{{issueId}}",
  "type": "ISSUE",
  "entityType": "ISSUE",
  "entityId": "{{issueId}}",
  "priority": "NORMAL"
}

###

# Get notifications for current user
GET http://localhost:8080/api/notifications
Authorization: Bearer {{authToken}}

###

# Get unread count
GET http://localhost:8080/api/notifications/unread-count
Authorization: Bearer {{authToken}}

###

# Mark one as read
PUT http://localhost:8080/api/notifications/{{notificationRecipientId}}/read
Authorization: Bearer {{authToken}}

###

# Mark all as read
PUT http://localhost:8080/api/notifications/mark-all-read
Authorization: Bearer {{authToken}}

###

# Delete one notification
DELETE http://localhost:8080/api/notifications/{{notificationRecipientId}}
Authorization: Bearer {{authToken}}

###

### Attachment API Tests ###

# Get presigned URL for upload
POST http://localhost:8080/api/attachments/presigned-url
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "fileName": "test-image.jpg",
  "fileType": "image/jpeg"
}

###

# Get download URL
POST http://localhost:8080/api/attachments/download-url
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "filePath": "test-image.jpg"
}

###

# Get attachments by issue ID
GET http://localhost:8080/api/attachments/issue/{{issueId}}
Authorization: Bearer {{authToken}}

###

# Get attachments by comment ID
GET http://localhost:8080/api/attachments/comment/{{commentId}}
Authorization: Bearer {{authToken}}

###

# Get attachments by message ID
GET http://localhost:8080/api/attachments/message/{{messageId}}
Authorization: Bearer {{authToken}}

###



# Test Project API Performance

# Project fetch (detailed, includes all members)
GET http://localhost:8080/api/projects/6bee79f8-1e07-428b-9f18-3d9f81553b8c
Authorization: Bearer {{authToken}}

###

# Simple project fetch (fast, no creator info)
GET http://localhost:8080/api/projects/6bee79f8-1e07-428b-9f18-3d9f81553b8c/simple
Authorization: Bearer {{authToken}}

###

# Project list (fast, no creator info)
GET http://localhost:8080/api/projects
Authorization: Bearer {{authToken}}

###

# Test User API Performance

# Get user detailed info (slower, includes all members)
GET http://localhost:8080/api/users/210f3b58-3e9f-46eb-a833-10e9ee7a1bc5
Authorization: Bearer {{authToken}}

###

# Get user minimal info (fast)
GET http://localhost:8080/api/users/210f3b58-3e9f-46eb-a833-10e9ee7a1bc5/minimal
Authorization: Bearer {{authToken}}

###